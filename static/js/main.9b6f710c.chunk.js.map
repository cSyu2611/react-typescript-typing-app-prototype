{"version":3,"sources":["components/PageDescription.tsx","components/TypingDiv.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageDescription","props","state","className","this","test","React","TypingDiv","timer","_onKeyDown","e","startFlag","setState","start","Date","getTime","setInterval","time","endFlag","key","typingArr","join","currentIdx","typo","typoCount","length","clearInterval","_onResetClick","id","onKeyDown","tabIndex","slice","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAmCeA,G,wDA1Bb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,GAFW,E,qDAMxB,OACE,uBAAKC,UAAU,yBACb,qBAAGA,UAAU,cAAcC,KAAKH,MAAMI,MACtC,2BAFF,gLAIE,2BAJF,4GAME,2BANF,4GAQE,2BARF,wFAUE,2BAVF,6HAYE,2BAZF,6C,GARwBC,cC2JfC,G,wDAhJb,WAAYN,GAAe,IAAD,8BACxB,cAAMA,IAuCAO,MAAa,KAxCK,EA0C1BC,WAAa,SAACC,GAEZ,IAAK,EAAKR,MAAMS,UAAW,CACzB,EAAKC,SAAS,CACZD,WAAW,IAEb,IAAME,GAAQ,IAAIC,MAAOC,UAEzB,EAAKP,MAAQQ,aAAY,WACvB,EAAKJ,SAAS,CACZK,MAAM,IAAIH,MAAOC,UAAYF,MAE9B,IAIA,EAAKX,MAAMgB,UAEVR,EAAES,MAAQ,EAAKjB,MAAMkB,UAAUC,KAAK,KAAK,EAAKnB,MAAMoB,YACtD,EAAKV,SAAS,CACZW,MAAM,EACND,WAAY,EAAKpB,MAAMoB,WAAa,IAKtC,EAAKV,SAAS,CACZW,MAAM,EACNC,UAAW,EAAKtB,MAAMsB,UAAY,IAKlC,EAAKtB,MAAMoB,WAAa,GAAK,EAAKpB,MAAMkB,UAAUC,KAAK,KAAKI,SAC9D,EAAKb,SAAS,CACZM,SAAS,IAEXQ,cAAc,EAAKlB,UA/EC,EAqF1BmB,cAAgB,WAEd,EAAKf,SAAS,CACZU,WAAY,EACZC,MAAM,EACNC,UAAW,EACXb,WAAW,EACXO,SAAS,EACTD,KAAM,IAGRS,cAAc,EAAKlB,QA9FnB,EAAKN,MAAQ,CAEXkB,UAAW,CACT,SACA,SACA,kBACA,kBACA,eACA,cACA,aACA,kBACA,aACA,gBACA,YACA,QACA,QACA,UACA,cACA,gBACA,YACA,cACA,eACA,cACA,gBACA,YAEFE,WAAY,EACZC,MAAM,EACNC,UAAW,EACXb,WAAW,EACXO,SAAS,EACTD,KAAM,GAjCgB,E,qDAmGhB,IAAD,OACP,OACE,oCACE,yBACEd,UAAU,aACVyB,GAAG,SACHC,UAAW,SAACnB,GAAD,OAAO,EAAKD,WAAWC,IAClCoB,SAAU,GAGV,0BAAM3B,UAAU,aACbC,KAAKF,MAAMkB,UAAUC,KAAK,KAAKU,MAAM,EAAG3B,KAAKF,MAAMoB,aAItD,0BACEnB,UAAWC,KAAKF,MAAMqB,KAAO,oBAAsB,gBAElDnB,KAAKF,MAAMkB,UAAUC,KAAK,KAAKjB,KAAKF,MAAMoB,aAI7C,0BAAMnB,UAAU,YACbC,KAAKF,MAAMkB,UACTC,KAAK,KACLU,MACC3B,KAAKF,MAAMoB,WAAa,EACxBlB,KAAKF,MAAMkB,UAAUC,KAAK,KAAKI,UAMvC,yBAAKtB,UAAU,oBACb,4BAAQ6B,QAAS,kBAAM,EAAKL,kBAA5B,4BACA,4BACE,oEAAYvB,KAAKF,MAAMsB,WACvB,wDAAUpB,KAAKF,MAAMe,KAAO,Y,GAzIhBgB,c,MCDTC,MAVf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,CAAiBE,KAAK,+FACtB,6BACA,kBAAC,EAAD,QCAc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b6f710c.chunk.js","sourcesContent":["import * as React from 'react'\n\nimport '../styles/description.css'\n\ninterface Props {\n  test: string\n}\ninterface State {}\nclass PageDescription extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <div className=\"description-container\">\n        <b className=\"page-title\">{this.props.test}</b>\n        <br />\n        寿限無寿限無 五劫の擦り切れ 海砂利水魚の 水行末 雲来末 風来末\n        <br />\n        食う寝る処に 住む処 藪ら柑子の 藪柑子\n        <br />\n        パイポ パイポ パイポの シューリンガン\n        <br />\n        シューリンガンの グーリンダイ\n        <br />\n        グーリンダイの ポンポコピーの ポンポコナの\n        <br />\n        長久命の 長助\n      </div>\n    )\n  }\n}\n\nexport default PageDescription\n","// libraries\nimport React, { Component } from 'react'\n\n// css\nimport '../styles/typing.css'\n\ninterface Props {}\n\ninterface State {\n  typingArr: Array<string>\n  currentIdx: number\n  typo: Boolean\n  typoCount: number\n  startFlag: Boolean\n  endFlag: Boolean\n  time: number\n}\n\nclass TypingDiv extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      // 今後ランダムな単語の配列からタイピング文を作りたいので，配列にしている．\n      typingArr: [\n        'jugemu',\n        'jugemu',\n        'gokounosurikire',\n        'kaijarisuigyono',\n        'suigyoumatsu',\n        'fuuraimatsu',\n        'unraimatsu',\n        'kuunerutokoroni',\n        'sumutokoro',\n        'yaburakoujino',\n        'burakouji',\n        'paipo',\n        'paipo',\n        'paipono',\n        'shu-ringann',\n        'shu-ringannno',\n        'gu-rindai',\n        'gu-rindaino',\n        'ponpokopi-no',\n        'ponpokonano',\n        'choukyuumeino',\n        'chousuke',\n      ],\n      currentIdx: 0,\n      typo: false,\n      typoCount: 0,\n      startFlag: false,\n      endFlag: false,\n      time: 0,\n    }\n  }\n\n  // タイマーref\n  // typescriptで\n  // <div ref={(ref)=>this.timer = ref} />的なことがしたかったけどめんどくさそう？\n  private timer: any = null\n\n  _onKeyDown = (e: any) => {\n    // first call\n    if (!this.state.startFlag) {\n      this.setState({\n        startFlag: true, // 開始フラグ true\n      })\n      const start = new Date().getTime()\n      // タイマーセット\n      this.timer = setInterval(() => {\n        this.setState({\n          time: new Date().getTime() - start,\n        })\n      }, 10)\n    }\n\n    // 終了判定が入るまで\n    if (!this.state.endFlag) {\n      // 押されたキーと現在の文字が一致したら\n      if (e.key === this.state.typingArr.join(' ')[this.state.currentIdx]) {\n        this.setState({\n          typo: false, // タイポ false\n          currentIdx: this.state.currentIdx + 1, // 次のidxへ\n        })\n      }\n      // タイポしたら\n      else {\n        this.setState({\n          typo: true, // タイポ true\n          typoCount: this.state.typoCount + 1, // タイポ回数 + 1\n        })\n      }\n\n      // 最終文字の入力が終了したら\n      if (this.state.currentIdx + 1 >= this.state.typingArr.join(' ').length) {\n        this.setState({\n          endFlag: true, // 終了フラグ true\n        })\n        clearInterval(this.timer) // タイマー停止\n      }\n    }\n  }\n\n  // リセットボタンクリック時\n  _onResetClick = () => {\n    // state リセット\n    this.setState({\n      currentIdx: 0,\n      typo: false,\n      typoCount: 0,\n      startFlag: false,\n      endFlag: false,\n      time: 0,\n    })\n    // タイマー停止\n    clearInterval(this.timer)\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className=\"typing-div\"\n          id=\"typing\"\n          onKeyDown={(e) => this._onKeyDown(e)}\n          tabIndex={0}\n        >\n          {/* 文字列先頭から現在の文字手前まで */}\n          <span className=\"done-font\">\n            {this.state.typingArr.join(' ').slice(0, this.state.currentIdx)}\n          </span>\n\n          {/* 現在の文字 */}\n          <span\n            className={this.state.typo ? 'current-font-typo' : 'current-font'}\n          >\n            {this.state.typingArr.join(' ')[this.state.currentIdx]}\n          </span>\n\n          {/* 現在の文字以降の文字列 */}\n          <span className=\"yet-font\">\n            {this.state.typingArr\n              .join(' ')\n              .slice(\n                this.state.currentIdx + 1,\n                this.state.typingArr.join(' ').length,\n              )}\n          </span>\n        </div>\n\n        {/* 結果ブロック */}\n        <div className=\"result-container\">\n          <button onClick={() => this._onResetClick()}>リセット</button>\n          <ul>\n            <div>タイポ回数：{this.state.typoCount}</div>\n            <div>タイム：{this.state.time / 1000}</div>\n          </ul>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default TypingDiv\n","import React from 'react'\n\nimport PageDescription from 'components/PageDescription'\nimport TypingDiv from 'components/TypingDiv'\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageDescription test=\"タイピングアプリのプロトタイプ\" />\n      <br />\n      <TypingDiv />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}